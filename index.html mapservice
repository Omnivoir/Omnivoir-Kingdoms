// sets up Leaflet map, draw controls, and Overpass road loading
export default class MapService {
  static init() {
    this.map = L.map('map').setView([36.85, -87.55], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom:19 }).addTo(this.map);

    this.drawnItems = new L.FeatureGroup().addTo(this.map);
    new L.Control.Draw({
      draw:   { rectangle:{ shapeOptions:{ color:'#3388ff', weight:2 } }, polyline:false, polygon:false, circle:false, marker:false, circlemarker:false },
      edit:   { featureGroup:this.drawnItems, edit:true, remove:false }
    }).addTo(this.map);

    this.gridBox = null;
    this.map.on(L.Draw.Event.CREATED, e => {
      this.drawnItems.clearLayers();
      this.gridBox = e.layer.setStyle({ opacity:0, fillOpacity:0 });
      this.drawnItems.addLayer(this.gridBox);
      this.loadRoads();
    });
    this.map.on('draw:edited', ()=>this.loadRoads());
  }

  static getMap() { return this.map; }

  static loadRoads() {
    if (!this.gridBox) return;
    const b  = this.gridBox.getBounds();
    const bb = [b.getSouth(),b.getWest(),b.getNorth(),b.getEast()].join(',');
    const q  = `[out:json][timeout:25];(way["highway"](${bb}));out geom;`;

    fetch('https://overpass-api.de/api/interpreter', {
      method:'POST',
      headers:{ 'Content-Type':'application/x-www-form-urlencoded' },
      body:'data='+encodeURIComponent(q)
    })
    .then(r=>r.json())
    .then(d=> this.renderRoads(d.elements, b))
    .catch(_=> this.roadsContainer && (this.roadsContainer.innerText='Error loading roads'));
  }

  static renderRoads(elems, b) {
    this.roadsContainer = this.roadsContainer || document.getElementById('roadsContainer');
    let html = '';
    elems.filter(e=>e.tags&&e.tags.name&&e.geometry)
         .sort((a,b)=>a.tags.name.localeCompare(b.tags.name))
         .forEach(e => {
      const coords = e.geometry.map(p=>[p.lat,p.lon]);
      const mid    = coords[Math.floor(coords.length/2)];
      const code   = this.rhqc(mid[0],mid[1],b);
      html += `<div class="road-item"><span class="road-code">${code}</span>${e.tags.name}</div>`;
    });
    this.roadsContainer.innerHTML = html || 'No roads found.';
  }

  static rhqc(lat,lng,b) {
    let code='', cb=[[b.getSouth(),b.getWest()],[b.getNorth(),b.getEast()]];
    for(let i=0;i<5;i++){
      const [s,w]=cb[0], [n,e]=cb[1], mLat=(s+n)/2, mLng=(w+e)/2;
      if(lat>=mLat && lng<=mLng){ code+='1'; cb=[[mLat,w],[n,mLng]]; }
      else if(lat>=mLat && lng> mLng){ code+='2'; cb=[[mLat,mLng],[n,e]]; }
      else if(lat< mLat && lng<=mLng){ code+='3'; cb=[[s,w],[mLat,mLng]]; }
      else { code+='4'; cb=[[s,mLng],[mLat,e]]; }
    }
    return code;
  }
}
