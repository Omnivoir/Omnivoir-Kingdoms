<!DOCTYPE html>
<html>
<head>
  <title>Omnivoir: Kingdoms – USA Castles & Walls</title>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"/>
  <style>
    html, body { margin:0; padding:0; height:100%; }
    #map { width:100%; height:100%; }
  </style>
</head>
<body>
  <div id="map"></div>

  <!-- Leaflet -->
  <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
  <!-- Turf.js for point-in-polygon -->
  <script src="https://unpkg.com/@turf/turf@6.5.0/turf.min.js"></script>

  <script>
  // --- Map Setup ---
  const map = L.map('map').setView([37.8, -96], 4);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution:'© OpenStreetMap', maxZoom:18
  }).addTo(map);

  // --- Assets (in /assets/castles/) ---
  const ASSETS = {
    large:  './assets/castles/large_castle.png',
    medium: './assets/castles/medium_castle.png',
    small:  './assets/castles/small_castle.png'
  };

  // --- Layers ---
  const castleLayer = L.layerGroup().addTo(map);
  const wallLayer   = L.layerGroup().addTo(map);

  // --- Helpers ---
  const m2deg = m => m / 111000;            // approximate meters → degrees
  function placeCastle(lat, lon, type){
    const sizeM = type==='large'?500 : type==='medium'?250 : 150;
    const half  = m2deg(sizeM/2);
    const bounds = [[lat-half,lon-half],[lat+half,lon+half]];
    L.imageOverlay(ASSETS[type], bounds).addTo(castleLayer);
  }
  function drawWall(coords){
    L.polyline(coords, {color:'#666', weight:8}).addTo(wallLayer);
  }
  function drawSquare(lat, lon, meters){
    const half = m2deg(meters/2);
    const pts = [
      [lat-half, lon-half],
      [lat-half, lon+half],
      [lat+half, lon+half],
      [lat+half, lon-half],
      [lat-half, lon-half]
    ];
    drawWall(pts);
  }

  // --- Fetch & Render ---
  async function loadAll(){
    const bbox = '24.396308,-125.0,49.384358,-66.93457';
    const query = `
      [out:json][timeout:60];
      (
        node["capital"="yes"](${bbox});
        node["place"="city"](${bbox});
        node["place"="town"](${bbox});
        relation["admin_level"="4"](${bbox});
        relation["admin_level"="6"](${bbox});
      );
      out body;
      >;
      out geom;
    `;
    const res = await fetch('https://overpass-api.de/api/interpreter', {
      method:'POST',
      body:'data='+encodeURIComponent(query)
    });
    const data = await res.json();

    // Separate fetched elements
    const nodes = data.elements.filter(e=>e.type==='node');
    const rels  = data.elements.filter(e=>e.type==='relation');

    // Build GeoJSON polygons for Turf
    const statePolys = rels
      .filter(r=>r.tags?.admin_level==='4' && r.geometry)
      .map(r=>turf.polygon([r.geometry.map(p=>[p.lon,p.lat])]));
    const countyPolys = rels
      .filter(r=>r.tags?.admin_level==='6' && r.geometry)
      .map(r=>({poly:turf.polygon([r.geometry.map(p=>[p.lon,p.lat])]), geom:r.geometry}));

    // Render each node
    nodes.forEach(n=>{
      const {lat, lon, tags} = n;
      let type = 'small';
      if (tags.capital==='yes')     type='large';
      else if (tags.place==='city') type='medium';

      placeCastle(lat, lon, type);

      if (type==='large'){
        // wrap state boundary
        for (let poly of statePolys){
          if (turf.booleanPointInPolygon([lon,lat], poly)){
            // extract coords from poly geometry
            const coords = poly.geometry.coordinates[0].map(pt=>[pt[1],pt[0]]);
            drawWall(coords);
            break;
          }
        }
      }
      else if (type==='medium'){
        // wrap county boundary
        for (let c of countyPolys){
          if (turf.booleanPointInPolygon([lon,lat], c.poly)){
            const coords = c.geom.map(p=>[p.lat,p.lon]);
            drawWall(coords);
            break;
          }
        }
      }
      else {
        // small: 20 km ×20 km square
        drawSquare(lat, lon, 20000);
      }
    });
  }

  document.addEventListener('DOMContentLoaded', loadAll);
  </script>
</body>
</html>
